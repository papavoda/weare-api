openapi: 3.0.3
info:
  title: Weare API
  version: 0.0.1
  description: Django rest framework api for upload images and videos. User registration
    and verify email.
paths:
  /api/v1/:
    get:
      operationId: v1_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: title
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostListList'
          description: ''
    post:
      operationId: v1_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
  /api/v1/{id}/:
    get:
      operationId: v1_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    put:
      operationId: v1_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    patch:
      operationId: v1_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    delete:
      operationId: v1_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/categories/:
    get:
      operationId: v1_categories_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryDetailList'
          description: ''
    post:
      operationId: v1_categories_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
  /api/v1/categories/{id}/:
    get:
      operationId: v1_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
    put:
      operationId: v1_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
    patch:
      operationId: v1_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
    delete:
      operationId: v1_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/categories/{id}/posts/:
    get:
      operationId: v1_categories_posts_list
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostListList'
          description: ''
    post:
      operationId: v1_categories_posts_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
  /api/v1/categories/{id}/posts/{id}/:
    get:
      operationId: v1_categories_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    put:
      operationId: v1_categories_posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    patch:
      operationId: v1_categories_posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    delete:
      operationId: v1_categories_posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/categories/create/:
    post:
      operationId: v1_categories_create_create
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/drafts/:
    get:
      operationId: v1_drafts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostDetailList'
          description: ''
    post:
      operationId: v1_drafts_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
  /api/v1/drafts/{id}/:
    get:
      operationId: v1_drafts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    put:
      operationId: v1_drafts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    patch:
      operationId: v1_drafts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    delete:
      operationId: v1_drafts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/get-cats/:
    get:
      operationId: v1_get_cats_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/images/{id}/:
    get:
      operationId: v1_images_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: v1_images_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_images_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/my-posts/:
    get:
      operationId: v1_my_posts_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/post-create/:
    post:
      operationId: v1_post_create_create
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/posts/:
    get:
      operationId: v1_posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: title
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostListList'
          description: ''
    post:
      operationId: v1_posts_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
  /api/v1/posts/{id}/:
    get:
      operationId: v1_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    put:
      operationId: v1_posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    patch:
      operationId: v1_posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    delete:
      operationId: v1_posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/posts/{id}/set-star/{star}/:
    post:
      operationId: v1_posts_set_star_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: star
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/tag-create/{tag}/:
    post:
      operationId: v1_tag_create_create
      parameters:
      - in: path
        name: tag
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/tags/:
    get:
      operationId: v1_tags_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagListList'
          description: ''
    post:
      operationId: v1_tags_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
          description: ''
  /api/v1/tags/{id}/:
    get:
      operationId: v1_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tag.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
          description: ''
    put:
      operationId: v1_tags_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tag.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
          description: ''
    patch:
      operationId: v1_tags_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tag.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTagList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTagList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTagList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
          description: ''
    delete:
      operationId: v1_tags_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tag.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/tags/{id}/posts/:
    get:
      operationId: v1_tags_posts_list
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostListList'
          description: ''
    post:
      operationId: v1_tags_posts_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
  /api/v1/tags/{id}/posts/{id}/:
    get:
      operationId: v1_tags_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    put:
      operationId: v1_tags_posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    patch:
      operationId: v1_tags_posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
          description: ''
    delete:
      operationId: v1_tags_posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/token/:
    post:
      operationId: v1_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh/:
    post:
      operationId: v1_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/token/verify/:
    post:
      operationId: v1_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/users/activateemail/:
    post:
      operationId: v1_users_activateemail_create
      tags:
      - v1
      responses:
        '200':
          description: No response body
  /api/v1/users/gallery-type/:
    post:
      operationId: v1_users_gallery_type_create
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/login/:
    post:
      operationId: v1_users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/users/me/:
    get:
      operationId: v1_users_me_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: v1_users_me_partial_update
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/password_reset/:
    post:
      operationId: v1_users_password_reset_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /api/v1/users/password_reset/confirm/:
    post:
      operationId: v1_users_password_reset_confirm_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/v1/users/refresh/:
    post:
      operationId: v1_users_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/users/signup/:
    post:
      operationId: v1_users_signup_create
      tags:
      - v1
      responses:
        '200':
          description: No response body
  /api/v1/videos/{id}/:
    get:
      operationId: v1_videos_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: v1_videos_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_videos_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    CategoryDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          readOnly: true
        path:
          type: string
          maxLength: 255
        depth:
          type: integer
          maximum: 2147483647
          minimum: 0
        numchild:
          type: integer
          maximum: 2147483647
          minimum: 0
        name:
          type: string
          maxLength: 100
      required:
      - depth
      - id
      - name
      - path
      - posts
    CustomUser:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        avatar:
          type: string
          format: uri
          nullable: true
        is_simple_gallery:
          type: boolean
        is_superuser:
          type: boolean
      required:
      - email
    ImagesOrderingEnum:
      enum:
      - file
      - name
      - index_number
      type: string
      description: |-
        * `file` - Filename
        * `name` - Name
        * `index_number` - Index
    PaginatedCategoryDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDetail'
    PaginatedPostDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostDetail'
    PaginatedPostListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostList'
    PaginatedTagListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TagList'
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        password1:
          type: string
        password2:
          type: string
      required:
      - password1
      - password2
      - token
      - uid
    PatchedCategoryDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          readOnly: true
        path:
          type: string
          maxLength: 255
        depth:
          type: integer
          maximum: 2147483647
          minimum: 0
        numchild:
          type: integer
          maximum: 2147483647
          minimum: 0
        name:
          type: string
          maxLength: 100
    PatchedPostDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
        average_stars:
          type: number
          format: double
          maximum: 10
          minimum: -10
          exclusiveMaximum: true
          exclusiveMinimum: true
        category_name:
          type: string
          readOnly: true
        images:
          type: string
          readOnly: true
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
          readOnly: true
        title:
          type: string
          maxLength: 500
        main_image:
          type: string
          format: uri
          title: Главное изображение
        text:
          type: string
          nullable: true
          title: Основной текст
          maxLength: 8000
        photo_date:
          type: string
          format: date
          title: Дата фотосъемки
        created:
          type: string
          format: date-time
          readOnly: true
        changed:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          title: Количество просмотров
        images_ordering:
          $ref: '#/components/schemas/ImagesOrderingEnum'
        videos_ordering:
          $ref: '#/components/schemas/VideosOrderingEnum'
        category:
          type: string
          format: uuid
          nullable: true
          title: Категория
          description: Выберите категорию
    PatchedPostList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        photo_date:
          type: string
          format: date
          title: Дата фотосъемки
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          title: Количество просмотров
        category:
          type: string
          format: uuid
          nullable: true
          title: Категория
          description: Выберите категорию
        category_name:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        main_image:
          type: string
          format: uri
          title: Главное изображение
        status:
          $ref: '#/components/schemas/StatusEnum'
        average_stars:
          type: number
          format: double
          maximum: 10
          minimum: -10
          exclusiveMaximum: true
          exclusiveMinimum: true
    PatchedTagList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        post:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 500
        status:
          $ref: '#/components/schemas/StatusEnum'
      required:
      - id
      - title
    PostDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
        average_stars:
          type: number
          format: double
          maximum: 10
          minimum: -10
          exclusiveMaximum: true
          exclusiveMinimum: true
        category_name:
          type: string
          readOnly: true
        images:
          type: string
          readOnly: true
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
          readOnly: true
        title:
          type: string
          maxLength: 500
        main_image:
          type: string
          format: uri
          title: Главное изображение
        text:
          type: string
          nullable: true
          title: Основной текст
          maxLength: 8000
        photo_date:
          type: string
          format: date
          title: Дата фотосъемки
        created:
          type: string
          format: date-time
          readOnly: true
        changed:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          title: Количество просмотров
        images_ordering:
          $ref: '#/components/schemas/ImagesOrderingEnum'
        videos_ordering:
          $ref: '#/components/schemas/VideosOrderingEnum'
        category:
          type: string
          format: uuid
          nullable: true
          title: Категория
          description: Выберите категорию
      required:
      - author
      - average_stars
      - category_name
      - changed
      - created
      - id
      - images
      - main_image
      - photo_date
      - tags
      - title
      - videos
    PostList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        photo_date:
          type: string
          format: date
          title: Дата фотосъемки
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          title: Количество просмотров
        category:
          type: string
          format: uuid
          nullable: true
          title: Категория
          description: Выберите категорию
        category_name:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        main_image:
          type: string
          format: uri
          title: Главное изображение
        status:
          $ref: '#/components/schemas/StatusEnum'
        average_stars:
          type: number
          format: double
          maximum: 10
          minimum: -10
          exclusiveMaximum: true
          exclusiveMinimum: true
      required:
      - average_stars
      - category_name
      - created
      - id
      - main_image
      - photo_date
      - title
    StatusEnum:
      enum:
      - draft
      - published
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    TagList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        post:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          readOnly: true
      required:
      - id
      - name
      - post
    ThumbSelectEnum:
      enum:
      - --start.jpg
      - --mid.jpg
      - --end.jpg
      type: string
      description: |-
        * `--start.jpg` - start
        * `--mid.jpg` - mid
        * `--end.jpg` - end
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 500
        index_number:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: Порядковый номер
        file:
          type: string
          format: uri
        thumbnail:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
          maxLength: 500
        thumb_select:
          $ref: '#/components/schemas/ThumbSelectEnum'
        post:
          type: string
          format: uuid
          nullable: true
      required:
      - file
      - id
    VideosOrderingEnum:
      enum:
      - file
      - name
      - index_number
      type: string
      description: |-
        * `file` - Filename
        * `name` - Name
        * `index_number` - Index
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
